---
- name: Get list of installed packages
  ansible.builtin.package_facts:
    manager: "auto"
  no_log: "{{ ara_api_secure_logging }}"

- name: Retrieve list of missing required packages
  ansible.builtin.set_fact:
    ara_api_missing_packages: "{{ ara_api_required_packages | difference(ansible_facts['packages'].keys()) }}"

# The ansible_python_version fact might end up retrieving the version of
# python2 so we need to explicitely get the version of python 3 available.
- name: Validate availability of Python 3.5
  command: /usr/bin/python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'
  changed_when: false
  failed_when: false
  register: python_version

- name: Fail pre-emptively if running Python <3.5
  ansible.builtin.fail:
    msg: "Python >=3.5 is required to run ARA"
  when: python_version.stdout is version('3.5', '<') or python_version.rc != 0

# The following tasks dynamically enable escalated privileges only when the
# directory to create is not located in the user's home directory.
- name: Ensure ara_api_root_dir exists
  ansible.builtin.file:
    path: "{{ ara_api_root_dir }}"
    state: directory
    mode: 0755

- name: Ensure ara_api_base_dir exists
  ansible.builtin.file:
    path: "{{ ara_api_base_dir }}"
    state: directory
    mode: 0750

- name: Ensure ara_api_log_dir exists
  ansible.builtin.file:
    path: "{{ ara_api_log_dir }}"
    state: directory
    mode: 0750
